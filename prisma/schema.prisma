// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  organizations Organization[] @relation("OrganizationUsers")
  projects   Project[] @relation("ProjectUsers")
  ownedOrganizations Organization[] @relation("OrganizationOwner")
  ownedProjects Project[] @relation("ProjectOwner")
  organizationRoles UserOrganizationRole[]
  projectRoles UserProjectRole[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization { 
  id        Int      @id @default(autoincrement())
  name      String
  description String?
  ownerId  Int
  owner    User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
  users     User[]   @relation("OrganizationUsers")
  projects  Project[]
  userRoles UserOrganizationRole[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  githubUrl String?
  organizationId Int
  organization Organization @relation(fields: [organizationId], references: [id])
  teamMembers User[]   @relation("ProjectUsers")
  ownerId     Int
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  envVars     EnvironmentVariable[]
  userRoles   UserProjectRole[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EnvironmentVariable {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([projectId, key])
}

model UserOrganizationRole {
  id             Int              @id @default(autoincrement())
  userId         Int
  organizationId Int
  role           OrganizationRole @default(MEMBER)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  @@unique([userId, organizationId])
}

model UserProjectRole {
  id        Int         @id @default(autoincrement())
  userId    Int
  projectId Int
  role      ProjectRole @default(VIEWER)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  @@unique([userId, projectId])
}



enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
}


enum OrganizationRole {
  OWNER
  MEMBER
}
