generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int                      @id @default(autoincrement())
  email              String                   @unique
  name               String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  password           String
  ownedOrganizations Organization[]           @relation("OrganizationOwner") // Legacy relation
  superOwnedOrganizations Organization[]      @relation("OrganizationSuperOwner") // New relation
  sentInvitations    OrganizationInvitation[] @relation("InvitationsSent")
  ownedProjects      Project[]                @relation("ProjectOwner")
  organizationRoles  UserOrganizationRole[]
  projectRoles       UserProjectRole[]
  organizations      Organization[]           @relation("OrganizationUsers")
  projects           Project[]                @relation("ProjectUsers")
}

model Organization {
  id          Int                      @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int // Legacy field - deprecated in favor of superOwnerId
  superOwnerId Int // New field for hierarchical ownership
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  owner       User                     @relation("OrganizationOwner", fields: [ownerId], references: [id]) // Legacy relation
  superOwner  User                     @relation("OrganizationSuperOwner", fields: [superOwnerId], references: [id]) // New relation
  invitations OrganizationInvitation[]
  projects    Project[]
  userRoles   UserOrganizationRole[]
  users       User[]                   @relation("OrganizationUsers")
}

model Project {
  id             Int                   @id @default(autoincrement())
  name           String
  description    String?
  githubUrl      String?
  organizationId Int
  ownerId        Int
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  envVars        EnvironmentVariable[]
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User                  @relation("ProjectOwner", fields: [ownerId], references: [id])
  userRoles      UserProjectRole[]
  teamMembers    User[]                @relation("ProjectUsers")
}

model EnvironmentVariable {
  id        Int      @id @default(autoincrement())
  key       String
  value     String
  projectId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, key])
}

model UserOrganizationRole {
  id             Int              @id @default(autoincrement())
  userId         Int
  organizationId Int
  role           OrganizationRole @default(MEMBER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model UserProjectRole {
  id        Int         @id @default(autoincrement())
  userId    Int
  projectId Int
  role      ProjectRole @default(VIEWER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model OrganizationInvitation {
  id             String           @id @default(cuid())
  email          String
  organizationId Int
  role           OrganizationRole @default(MEMBER)
  status         InvitationStatus @default(PENDING)
  invitedBy      Int
  createdAt      DateTime         @default(now())
  expiresAt      DateTime?
  inviter        User             @relation("InvitationsSent", fields: [invitedBy], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
}

enum ProjectRole {
  OWNER
  EDITOR
  VIEWER
}

enum OrganizationRole {
  SUPER_OWNER
  OWNER
  ADMIN
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}
